// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]

  @@map("users")
}

model Event {
  id            String    @id @default(cuid())
  userId        String
  name          String
  scheduledDate DateTime?
  budget        Decimal?
  memo          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issues Issue[]
  tasks  Task[]

  @@map("events")
}

model Issue {
  id          String   @id @default(cuid())
  eventId     String
  name        String
  description String?
  priority    Priority @default(MEDIUM)
  status      Status   @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  event   Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  options Option[]

  @@map("issues")
}

model Option {
  id          String   @id @default(cuid())
  issueId     String
  name        String
  description String?
  isSelected  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  issue     Issue      @relation(fields: [issueId], references: [id], onDelete: Cascade)
  agreements Agreement[]

  @@map("options")
}

model Task {
  id        String      @id @default(cuid())
  eventId   String
  name      String
  assignee  String
  dueDate   DateTime?
  status    TaskStatus  @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Agreement {
  id        String   @id @default(cuid())
  optionId  String
  agreedAt  DateTime @default(now())
  memo      String?
  createdAt DateTime @default(now())

  option Option @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@map("agreements")
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  PENDING
  AGREED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}
